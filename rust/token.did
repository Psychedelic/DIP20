type Metadata = record {
  fee : nat;
  deploy_time : nat64;
  decimals : nat8;
  fee_to : principal;
  owner : principal;
  history_size : nat64;
  logo : text;
  name : text;
  total_supply : nat;
  symbol : text;
};
type Result = variant { Ok : nat; Err : TxError };
type TokenInfo = record {
  holder_number : nat64;
  metadata : Metadata;
  cycles : nat64;
};
type TxError = variant {
  InsufficientAllowance;
  InsufficientBalance;
  Unauthorized;
  Other;
};
service : (
  text,
  text,
  text,
  nat8,
  nat,
  principal,
  nat,
  principal,
  principal,
) -> {
  allowance : (principal, principal) -> (nat) query;
  approve : (principal, nat) -> (Result);
  balanceOf : (principal) -> (nat) query;
  burn : (nat) -> (Result);
  decimals : () -> (nat8) query;
  getAllowanceSize : () -> (nat64) query;
  getHolders : (nat64, nat64) -> (vec record { principal; nat }) query;
  getLogo : () -> (text) query;
  getMetadta : () -> (Metadata) query;
  getTokenInfo : () -> (TokenInfo) query;
  getUserApprovals : (principal) -> (vec record { principal; nat }) query;
  historySize : () -> (nat64) query;
  mint : (principal, nat) -> (Result);
  name : () -> (text) query;
  owner : () -> (principal) query;
  setFee : (nat) -> ();
  setFeeTo : (principal) -> ();
  setLogo : (text) -> ();
  setOwner : (principal) -> ();
  symbol : () -> (text) query;
  totalSupply : () -> (nat) query;
  transfer : (principal, nat) -> (Result);
  transferFrom : (principal, principal, nat) -> (Result);
}